/*
 * HIVE
 * Copyright(c) 2016 - Horizontal Integration
 * MIT Licensed
 *
 */

'use strict';

/*
 * HIVE Definition
 *
 */

var hive         = require('../../lib/hive');
var config       = hive.config;
var taskConfig   = config.tasks.iconFont;
var handleErrors = hive.utils.notifyErrors;
var logger       = hive.utils.logger;
var colors       = hive.utils.colors;

if(!taskConfig) return;

/*
 * Module Definition
 *
 */

var gulp   = require('gulp');
var render = require('gulp-nunjucks-render');
var rename = require('gulp-rename');

/*
 * FUNCTION prototype
 *
 */

exports = module.exports = generateIconScss;

/*
 * Generate icon scss
 * @public
 *
 */

function generateIconScss(config) {
  function generateIcon(glyphs, options) {
    logger.info(colors.blue('Generating ' + config.sassDest + '/' + config.sassOutputName));
 
    return gulp.src(config.template)
      .pipe(render({
        data: {
          icons: glyphs.map(function(glyph) {
            logger.info(colors.green('+ adding ' + glyph.name + ' glyph'));  
            
            return {
              name: glyph.name,
              code: glyph.unicode[0].charCodeAt(0).toString(16).toUpperCase()
            }
          }),
          fontName: config.options.fontName,
          fontPath: config.fontPath,
          className: config.className,
          comment: '// DO NOT EDIT DIRECTLY!\n  //Generated by Hive\n  //from ' + config.template   
        },
        envOptions: {
          watch: false
        }
      }))
    .on('error', handleErrors)
    .pipe(rename(config.sassOutputName))
    .pipe(gulp.dest(config.sassDest));
  }

  return generateIcon;
};
